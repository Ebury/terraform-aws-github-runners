#cloud-config
# See https://cloudinit.readthedocs.io/en/latest/

# ## Helpful commands ##
# sudo cat /var/lib/cloud/instance/user-data.txt
# sudo cat /var/log/cloud-init-output.log
# cloud-init devel schema --config-file x.yaml

# Install additional packages on first boot
package_update: true
package_reboot_if_required: true
packages:
- awscli
- jq
- parallel
- cloud-utils
# ##########################################
# Extra packages
%{~ for X in PACKAGES }
- ${X}
%{~ endfor }
# ##########################################
# ##########################################
write_files:
- path: /home/ubuntu/ephemeral_runner.sh
  permissions: '700'
  content: |
    #!/bin/bash
    set -e
    die() { echo "$*" 1>&2 ; exit 1; }
    [ "$#" -eq 1 ] || die "1 argument required, $# provided."
    RUN=$1
    cp -R /home/ubuntu/actions-runner /home/ubuntu/actions-runner-$RUN

    GITHUB_APP_CLIENT_ID=`aws ssm get-parameter --with-decryption --name ${SSM_GITHUB_APP_CLIENT_ID} --region ${REGION} | jq -r '.Parameter.Value'`
    GITHUB_APP_PRIVATE_KEY=`aws ssm get-parameter --with-decryption --name ${SSM_GITHUB_APP_PRIVATE_KEY} --region ${REGION} | jq -r '.Parameter.Value'`
    GITHUB_APP_INSTALLATION_ID=`aws ssm get-parameter --with-decryption --name ${SSM_GITHUB_APP_INSTALLATION_ID} --region ${REGION} | jq -r '.Parameter.Value'`

    client_id=$GITHUB_APP_CLIENT_ID
    pem=$GITHUB_APP_PRIVATE_KEY
    
    now=$(date +%s)
    iat=$(($now - 60)) # Issues 60 seconds in the past
    exp=$(($now + 600)) # Expires 10 minutes in the future
    
    b64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }
    
    header_json='{
        "typ":"JWT",
        "alg":"RS256"
    }'
    # Header encode
    header=$( echo -n "$header_json" | b64enc )
    
    payload_json="{
        \"iat\":$iat,
        \"exp\":$exp,
        \"iss\":\"$client_id\"
    }"
    # Payload encode
    payload=$( echo -n "$payload_json" | b64enc )
    
    # Signature
    header_payload="$header"."$payload"
    signature=$(
        openssl dgst -sha256 -sign <(echo -n "$pem") \
        <(echo -n "$header_payload") | b64enc
    )
   
    # Github APP is a JWT token using the Private Key generate in Github and the Client ID.
    GITHUB_JWT_TOKEN="$header_payload"."$signature"
    
    [ "$GITHUB_JWT_TOKEN" != "" ] || die "Unable to retrieve access token."
    GITHUB_APP_TOKEN_RESPONSE=`curl -s -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_JWT_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/app/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens"`
    GITHUB_AUTH_GITHUB_RUNNER=`echo $GITHUB_APP_TOKEN_RESPONSE | jq -r '.token'`
   
    TOKEN_RESPONSE=`curl --request POST --url "https://api.github.com/orgs/${GITHUB_ORGANISATION_NAME}/actions/runners/registration-token" --header "Accept: application/vnd.github+json" --header "Authorization: Bearer $GITHUB_AUTH_GITHUB_RUNNER"`
    TOKEN=`echo $TOKEN_RESPONSE | jq -r '.token'`
    [ "$TOKEN" != "null" ] || die "Unable to retrieve token."

    NAME=`hostname`-run-$RUN
    echo NAME=$NAME
    /home/ubuntu/actions-runner-$RUN/config.sh --url '${GITHUB_URL}' --ephemeral --disableupdate --token $TOKEN --name $NAME ${ARG_RUNNERGROUP} ${ARG_LABELS}
    cd /home/ubuntu/actions-runner-$RUN/
    bash ./run.sh
- path: /home/ubuntu/ephemeral_runner_svc.sh
  permissions: '700'
  content: |
    #!/bin/bash
    # Cleanup leftovers if instance was rebooted
    rm -rf /home/ubuntu/actions-runner-*
    INSTANCE_ID=`ec2metadata --instance-id`
    aws ec2 create-tags --region ${REGION} --resources $INSTANCE_ID --tags Key=terraform-aws-github-runner:setup,Value=done
%{~ if PARALLEL_RUNNER_COUNT == -1 }
    JOBS=`nproc`
%{~ else}
    JOBS=${PARALLEL_RUNNER_COUNT}
%{~ endif }
    echo JOBS=$JOBS
    if [ $JOBS -ge 1 ]; then
      seq 99999 | parallel -j $JOBS -a - 'su ubuntu -c "/home/ubuntu/ephemeral_runner.sh {}" ; rm -rf /home/ubuntu/actions-runner-{} ; sleep 1'
    fi
- path: /etc/systemd/system/this.service
  content: |
    [Unit]
    Description=this service
    After=network.target
    [Service]
    Type=simple
    User=root
    ExecStart=/home/ubuntu/ephemeral_runner_svc.sh
    [Install]
    WantedBy=multi-user.target
- path: /etc/crontab
  content: |
    */15 * * * * root docker system prune -f > var/log/docker_prune.log 2>&1
  append: true
%{~ if length(CLOUDWATCH_LOG_GROUP) > 0 }
- path: awslogs.conf
  content: |
    [general]
    state_file = /var/awslogs/state/agent-state
    [/var/log/syslog]
    datetime_format = %Y-%m-%d %H:%M:%S
    file = /var/log/syslog
    buffer_duration = 5000
    log_stream_name = {instance_id}
    initial_position = start_of_file
    log_group_name = ${CLOUDWATCH_LOG_GROUP}/var/log/syslog
%{~ endif }
%{~ for X in WRITE_FILES }
- ${X}
%{~ endfor }
runcmd:
# ##########################################
# Extra runcmds
- echo ==== EXTRA RUNCMDS ====
%{~ for X in RUNCMDS }
- ${X}
%{~ endfor }
%{~ if length(CLOUDWATCH_LOG_GROUP) > 0 }
- curl -s https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
- python2 ./awslogs-agent-setup.py -r ${REGION} -n -c awslogs.conf
%{~ endif }
# ##########################################
# ##########################################
- echo ==== ACTIONS-RUNNER ====
# download actions-runner
- mkdir actions-runner && cd actions-runner
- curl -s https://github.com/actions/runner/releases | grep -o -E "https://github.*actions-runner-linux-x64-[0-9\.]+.tar.gz" | sort | uniq > versions.txt
- RUNNER_FILE_LINK=`cat versions.txt | tail -n1`
- curl -s -o actions-runner-linux-x64.tar.gz -L $RUNNER_FILE_LINK
- tar xzf ./actions-runner-linux-x64.tar.gz
- cd ..
- mv actions-runner /home/ubuntu/actions-runner
- chown -R ubuntu:ubuntu /home/ubuntu
- chmod a+r -R /home/ubuntu/actions-runner
- systemctl enable this.service

# install kubectl/aws
- apt remove awscli -y
- snap install kubectl --channel=1.28/stable --classic
- snap install aws-cli --classic


power_state:
  mode: reboot

# ##########################################
# Other
%{~ if length(OTHER) > 0 }
${OTHER}
%{~ endif }
